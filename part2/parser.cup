/* Package and Import Specifications */
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Usercode Components */
parser code {:
    Scanner s;
    List<String> irOutput = new ArrayList<>();
    Parser(Scanner s) { this.s = s; }
    
    public List<String> getIROutput() {
        return irOutput;
    }
    private void writeIRToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("Translated.ir"))) {
            for (String line : irOutput) {
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error writing IR to file: " + e.getMessage());
        }
    }
:}

/* Connect to the scanner */
scan with {: return s.next_token(); :}

/* Terminals */
terminal SEMI, PLUS, LPAREN, RPAREN, LBRACE, RBRACE, COMMA;
terminal String STRING_LITERAL, ID;
terminal IF, ELSE, DEF, REV, PRE, SUF, EQ;

/* Non Terminals */
non terminal program;
non terminal func_list;
non terminal expr_list;
non terminal function_declaration;
non terminal top_level_expression;
non terminal args, arg_list, body;
non terminal expr;

/* Operator precedence */
precedence left PLUS;
precedence left IF;
precedence left REV;

/* Grammar rules */
program ::= func_list expr_list
          {: 
             writeIRToFile(); 
          :};

func_list ::= /* empty */
            | func_list function_declaration;

expr_list ::= expr_list top_level_expression
            | top_level_expression;

function_declaration ::= DEF ID LPAREN args RPAREN LBRACE body RBRACE;

args ::= /* empty */
       | arg_list;

arg_list ::= ID
           | arg_list COMMA ID;

body ::= top_level_expression 
              {: irOutput.add($top_level_expression); :}
       | body top_level_expression
              {: irOutput.add($top_level_expression); :};

top_level_expression ::= expr SEMI
       {: 
          RESULT = $expr;
          irOutput.add($expr); 
       :};

expr ::= expr PLUS expr {: RESULT = $expr0 + $expr2; :}
       | REV expr {: RESULT = "reverse(" + $expr + ")"; :}
       | LPAREN expr RPAREN {: RESULT = $expr; :}
       | ID {: RESULT = $ID; :}
       | STRING_LITERAL {: RESULT = $STRING_LITERAL; :}
       | IF LPAREN expr PRE expr RPAREN expr ELSE expr {: RESULT = "if (" + $expr1 + ".startsWith(" + $expr3 + ")) " + $expr5 + " else " + $expr7; :}
       | IF LPAREN expr SUF expr RPAREN expr ELSE expr {: RESULT = "if (reverse(" + $expr1 + ").startsWith(reverse(" + $expr3 + "))) " + $expr5 + " else " + $expr7; :}
       | IF LPAREN expr EQ expr RPAREN expr ELSE expr  {: RESULT = "if (" + $expr1 + ".equals(" + $expr3 + ")) " + $expr5 + " else " + $expr7; :};
